<style>

    [v-cloak] { display:none; }
    .post__wrapper {
        display: flex;
        flex-direction: column;
        background-color: white;
        margin-bottom: 20px;
    }

    .post__header {
        height: 60px;
        padding: 16px;
        display: flex;
        align-items: center;
    }

    .post__header img {
        object-position: center; /* Center the image within the element */
        object-fit: cover;
        width: 50px;
        height: 50px;
        border-radius: 100px;
        border: solid 1px rgb(94, 94, 94);
        margin-right: 10px;
    }

    .post__header .post__username {
        font-weight: bold;
    }

    .post__header .post__date {
        color: gray;
    }

    .post__image {
        overflow: hidden;
        margin-bottom: 10px;
    }

    .post__image img{
        object-fit: contain;
        width: 100%;
        height: 400px;
        
    }

    .post__text {
        padding: 16px;
    }

    .delete__conform {
        width: 100%;
        height: 100%;
        position: fixed;
        left: 0;
        top: 0;
        background-color: rgba(0, 0, 0, 0.8);
        padding-top: 100px;
    }

    .delete__conform__wrapper {
        background-color: white;
        width: 50%;
        margin: auto;
        padding: 16px;
        border-radius: 5px;
    }

    .delete__message {
        font-weight: bold;
    }

    .delete__button_group {
       display: flex;
    }

    .delete__button_group button {
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        outline: none;
        cursor: pointer;
    }

    .delete__gray__button {
        background-color: gray;
    }

    .delete__red__button {
        background-color: red;
    }

    .modal__container {
        width: 100%; height: 100%;
            top: 0; left: 0;
            position: fixed;
            padding-top: 200px;
            background-color: rgba(0, 0, 0, 0.8)
    }

    .modal__form {
        margin: auto; background-color: white; 
        width: 50%; padding: 16px;
        border-radius: 5px
    }

    .create__gray_button {
        background-color: gray;
    }

    .create__blue__button {
        background-color: blue;
    }

    .create__post__button {
        position: fixed; 
        height: 60px;
        width: 60px;
        background: white;
        bottom: 20px;
        right: 20px;
        border: none;
        border-radius: 30px;
        outline: none;
    }
</style>




<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<%- /* Expose locals as `window.SAILS_LOCALS` :: */ exposeLocalsToBrowser({keys: ['allPosts']}) %>
<%- partial('../../partials/navbar.ejs') %> 

<div style="background-color: rgb(238, 238, 238); 
    padding: 24px; position: relative;">

    <div id="app" style="width: 630px; margin: auto;" v-cloak>
        <div v-if="showDeleteConform" class="delete__conform">
            <div class="delete__conform__wrapper">
                <div class="delete__message">
                   <p>Did you conform delete this post? This action can not be withdraw!</p> 
                </div>
                <div class="delete__button_group">
                    <div style="flex: 1;"></div>
                    <button v-on:click="hideConform()" style="margin-right: 10px;">CENCLE</button>
                    <button v-on:click="conformDeletePost" v-bind:class="[isDeleting ? 'delete__gray__button' : 'delete__red__button']">DELETE</button>
                </div>
            </div>
        </div>


        <div v-if='shouldShowPostForm' class="modal__container">
            <div class="modal__form">
                <div>
                    Create Post
                </div>
                <!-- v-model is used to bidirectionally bind a state variable to an input -->
                <textarea style="height: 100px; width: 100%; 
                    border: solid 1px darkgray; margin: 12px 0px;
                    border-radius: 5px; font-size: 14px;
                    padding: 12px" 
                    v-model="postBodyText"
                    placeholder="Enter post body here">
                </textarea>
                <input v-on:change="handleFileChange" type="file">
                <img style="max-width: 100%; margin-top: 12px" :src="postFileImageSource">
                <div style="display: flex; margin-top: 16px">
                    <div style="flex: 1"></div>
                    <button v-on:click="shouldShowPostForm = false"
                            class="cancel">Cancel</button>
                    <button :disabled="isCreatingPost"
                        style="color: white; border-radius: 5px; border: solid 1px; margin-left: 12px"
                        v-bind:class="isCreatingPost ? 'create__gray_button' : 'create__blue__button'"
                        v-on:click="createPost()">
                        Create
                    </button>
                </div>
            </div>
        </div>

        <button class="create__post__button" v-on:click="shouldShowPostForm = true">
            Create
        </button>


        <div v-for="p in posts">
            <div class="post__wrapper">

                <div class="post__header">
                    <div><img class="profile__icon" :src="p.user.profileImageUrl" alt=""></div>
                    <div>
                        <div class="post__username">{{p.user.fullName}}</div>
                        <div class="post__date">
                        {{p.fromNow}}
                        </div>
                    </div>
                    
                </div>

                <div class="post__image">
                    <img :src="p.imageUrl" alt="postImage">
                </div>
                <div class="post__text">
                    {{p.text}}
                </div>
                <button v-on:click="deleteButtonTapped(p)">DELETE</button>
            </div>
        </div>
    </div>
</div>




<script>
    var app = new Vue({
        el: "#app",
        data: {
            posts: window.SAILS_LOCALS.allPosts,
            showDeleteConform: false,
            isDeleting: false,
            postBodyText: null,
            selectedFile: null,
            postFileImageSource: null,
            slectedDeletePost: null,
            shouldShowPostForm: false,
            isCreatingPost: false
        },
        methods: {
            handleFileChange: function(event) {
                this.selectedFile = event.target.files[0]
                this.postFileImageSource = window.URL.createObjectURL(this.selectedFile)
            },

            createPost: async function() {
                const formData = new FormData()
                formData.append('postBody', this.postBodyText)
                formData.append('imagefile', this.selectedFile)
                this.isCreatingPost = true
                try {
                   await axios.post('/post', formData)
                    location.reload()
                }catch (error) {
                    this.isCreatingPost = false
                    console.log(error.toString())
                }
            },

            deleteButtonTapped: async function(post) {
                this.slectedDeletePost = post
                this.showDeleteConform = true
                return
            },

            conformDeletePost: async function() {
                const postId = this.slectedDeletePost.id
                this.showDeleteConform = false
                
                try {
                    this.isDeleting = true
                    await axios.delete(`/post/${postId}`)
                    this.posts = this.posts.filter(p => {
                        return p.id != post.id
                    })
                    this.isDeleting = false
                } catch(error) {
                    console.log(error.toString())
                }
            },

            hideConform: function() {
                this.showDeleteConform = false
            }
        }
    })
</script>